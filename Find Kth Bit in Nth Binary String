//Brute force Approach
class Solution {
public:
    char findKthBit(int n, int k) {
        string res = "0";
        for (int i = 2; i <= n; i++) {
            string invert = "";
            for (int i = res.size() - 1; i >= 0; i--) {
                invert += (res[i] == '1' ? '0' : '1');
            }
            res = res + '1' + invert;
        }
        return res[k - 1];
    }
};

//Optimized Approach
class Solution {
public:
    char findKthBit(int n, int k) {
        if (n == 1) return '0';

        // Calculate the length of Sn
        int len = 1 << n;  // Equivalent to 2^n

        // If k is in the first half of the string, recurse with n-1
        if (k < len / 2) {
            return findKthBit(n - 1, k);
        } else if (k == len / 2) {
            return '1';
        }
        // If k is in the second half of the string
        else {
            // Find the corresponding bit in the first half and invert it
            char correspondingBit = findKthBit(n - 1, len - k);
            return (correspondingBit == '0') ? '1' : '0';
        }
    }
};
