class Solution {
public:
    int shortest_path(int src, int dest, int n, vector<int> adj[]) {
        queue<pair<int, int>> q;
        q.push({0, src});

        vector<int> dist(n, 1e9);
        dist[src] = 0;

        while (!q.empty()) {
            auto [distance, node] = q.front();
            q.pop();

            for (auto it : adj[node]) {
                if (dist[it] > distance + 1) {
                    dist[it] = distance + 1;
                    q.push({dist[it], it});
                }
            }
        }
        return dist[dest];
    }

    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {
        vector<int> adj[n];

        for (int i = 0; i < n - 1; i++) {
            adj[i].push_back(i + 1);
        }

        vector<int> res;
        for (int i = 0; i < queries.size(); i++) {
            adj[queries[i][0]].push_back(queries[i][1]);
            int shortest_dist = shortest_path(0, n - 1, n, adj);
            res.push_back(shortest_dist);
        }
        return res;
    }
};
