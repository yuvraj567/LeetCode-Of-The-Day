class SummaryRanges {
public:
    set<int> unique;
    SummaryRanges() {
        unique.clear();
    }
    
    void addNum(int value) {
        unique.insert(value);
    }
    
    vector<vector<int>> getIntervals() {
        vector<vector<int>> res;
        vector<int> nums(unique.begin(), unique.end());

        int n = nums.size();
        for (int i = 0; i < n;) {
            int left = i;
            int right = i;

            i++;

            while (i < n && nums[right] + 1 == nums[i]) {
                i++;
                right++;
            }

            res.push_back({nums[left], nums[right]});
        }
        return res;
    }
};

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges* obj = new SummaryRanges();
 * obj->addNum(value);
 * vector<vector<int>> param_2 = obj->getIntervals();
 */









class SummaryRanges {
public:
    map<int, int> intervals;
    SummaryRanges() {}
    
    void addNum(int value) {
        int left = value, right = value;
        auto small_entry = intervals.upper_bound(value);

        if (small_entry != intervals.begin()) {
            auto max_entry = small_entry;
            max_entry--;

            if (max_entry->second >= value) {
                return;
            }
            if (max_entry->second == value - 1) {
                left = max_entry->first;
            }
        }
        if (small_entry != intervals.end() && small_entry->first == value + 1) {
            right = small_entry->second;
            intervals.erase(small_entry);
        }
        intervals[left] = right;
    }
    
    vector<vector<int>> getIntervals() {
        vector<vector<int>> res;

        for (auto it : intervals) {
            res.push_back({it.first, it.second});
        }

        return res;
    }
};

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges* obj = new SummaryRanges();
 * obj->addNum(value);
 * vector<vector<int>> param_2 = obj->getIntervals();
 */
