//Brute force approach
class Solution {
public:
    int maximumSwap(int num) {
        string numStr = to_string(num);
        int n = numStr.size();
        int maxNum = num;

        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                swap(numStr[i], numStr[j]);
                maxNum = max(maxNum, stoi(numStr));
                swap(numStr[i], numStr[j]);
            }
        }
        return maxNum;
    }
};

//Better approach
class Solution {
public:
    int maximumSwap(int num) {
        string numStr = to_string(num);
        int n = numStr.size();
        vector<int> maxRightIndex(n); // Stores the index of the max digit from current position to the end

        // First pass: Populate maxRightIndex with the index of the largest
        // digit to the right of each position
        maxRightIndex[n - 1] = n - 1;
        for (int i = n - 2; i >= 0; --i) {
            maxRightIndex[i] = (numStr[i] > numStr[maxRightIndex[i + 1]]) ? i : maxRightIndex[i + 1];
        }

        // Second pass: Find the first place where we can swap to maximize the number
        for (int i = 0; i < n; ++i) {
            if (numStr[i] < numStr[maxRightIndex[i]]) {
                swap(numStr[i], numStr[maxRightIndex[i]]); // Swap to maximize the number
                return stoi(numStr); // Return the new number immediately after the swap
            }
        }

        return num; // Return the original number if no swap can maximize it
    }
};

//Optimal approach
class Solution {
public:
    int maximumSwap(int num) {
        string numStr = to_string(num);
        int n = numStr.size();
        vector<int> lastSeen(10, -1);  // Store the last occurrence of each digit

        // Record the last occurrence of each digit
        for (int i = 0; i < n; ++i) {
            lastSeen[numStr[i] - '0'] = i;
        }

        // Traverse the string to find the first digit that can be swapped with a larger one
        for (int i = 0; i < n; ++i) {
            for (int d = 9; d > numStr[i] - '0'; --d) {
                if (lastSeen[d] > i) {
                    swap(numStr[i], numStr[lastSeen[d]]);  // Perform the swap
                    return stoi(numStr);  // Return the new number immediately after the swap
                }
            }
        }

        return num;  // Return the original number if no swap can maximize it
    }
};
